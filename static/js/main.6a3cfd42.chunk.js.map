{"version":3,"sources":["logo.svg","Components/AttendantComponent.js","Components/AttendantsContainer.js","shared/guests.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Attendant","state","guests","_this","props","setTags","id","firstState","react_default","a","createElement","secondState","type","value","confirmed","console","log","this","className","name","Component","AttendantsContainer","guest","map","AttendantComponent","key","toString","GUESTS","App","addGuest","defaultValue","placeholder","Components_AttendantsContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KC2CzBC,0NAvCXC,MAAQ,CACJC,OAASC,EAAKC,MAAMF,UAGxBG,QAAU,SAACC,OAMXC,WACIC,EAAAC,EAAAC,cAAA,kBAGJC,YACIH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAYC,MAAUV,EAAKC,MAAMU,UAAY,OAAS,UADtE,cAGAN,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,iGASJ,OAFAK,QAAQC,IAAIC,KAAKb,MAAMF,QAInBM,EAAAC,EAAAC,cAAA,MAAIQ,UAA+B,IAAjBD,KAAKb,MAAME,GAAW,UAAY,aAChDE,EAAAC,EAAAC,cAAA,YAAOO,KAAKb,MAAMe,MACE,IAAlBF,KAAKb,MAAME,GAAYW,KAAKV,WAAaU,KAAKN,oBAnCxCS,cCyBTC,EAxBa,SAACjB,GAEzB,IAAMkB,EAAQlB,EAAMF,OAAOqB,IAAI,SAAAD,GAAK,OAChCd,EAAAC,EAAAC,cAACc,EAAD,CACIC,IAAMH,EAAMhB,GAAGoB,WACfpB,GAAMgB,EAAMhB,GACZa,KAAOG,EAAMH,KACbL,UAAYQ,EAAMR,cAM1B,OAFAC,QAAQC,IAAIM,GAKRd,EAAAC,EAAAC,cAAA,UACKY,ICpBAK,EAAS,CAElB,CACIrB,GAAM,EACNa,KAAO,UACPL,WAAY,GAGhB,CACIR,GAAM,EACNa,KAAO,SACPL,WAAY,GAGhB,CACIR,GAAM,EACNa,KAAO,OACPL,WAAY,ICiDLc,6MAzDb3B,MAAO,CAELC,OAASyB,KAIXE,SAAW,qFAKT,OAEIrB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOkB,aAAa,GAAGC,YAAY,mBAC/CvB,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASO,KAAK,SAASN,MAAM,UAA1C,YAGJL,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,QACbV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,aADd,sCAIFJ,EAAAC,EAAAC,cAAA,SAAOQ,UAAU,WACfV,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,gBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,gBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kBAKNF,EAAAC,EAAAC,cAACsB,EAAD,CACE9B,OAAUe,KAAKhB,MAAMC,kBAjDjBkB,aCKEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6a3cfd42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\r\n\r\nclass Attendant extends Component {\r\n\r\n    state = {\r\n        guests : this.props.guests\r\n    }\r\n    \r\n    setTags = (id)=>{\r\n        if(id > 0){\r\n\r\n        }\r\n    }\r\n\r\n    firstState =(\r\n        <div> </div>\r\n    )\r\n\r\n    secondState = (\r\n        <div>\r\n            <label>\r\n                <input type=\"checkbox\"  value = {(this.props.confirmed) ?\"true\" : \"false\"} /> Confirmed\r\n            </label>\r\n            <button>edit</button>\r\n            <button>remove</button>\r\n        </div>\r\n    )\r\n\r\n\r\n    render() {\r\n\r\n        console.log(this.props.guests);\r\n        \r\n        return(\r\n\r\n            <li className = {(this.props.id ===0 )? \"pending\" : \"confirmed\"}>\r\n                <span>{this.props.name}</span>\r\n                {(this.props.id === 0) ? this.firstState : this.secondState}            \r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Attendant;","import React from 'react';\r\nimport Attendant from './AttendantComponent.js'\r\n\r\nconst AttendantsContainer = (props) =>{\r\n\r\n    const guest = props.guests.map(guest => (\r\n        <Attendant  \r\n            key ={guest.id.toString()}\r\n            id = {guest.id}\r\n            name ={guest.name}\r\n            confirmed ={guest.confirmed}\r\n        />\r\n        \r\n    ))\r\n    console.log(guest);\r\n\r\n    return( \r\n\r\n       \r\n        <ul>\r\n            {guest}\r\n        </ul>\r\n    );\r\n    \r\n\r\n}\r\n\r\nexport default AttendantsContainer;","export const GUESTS = [\r\n\r\n    {\r\n        id :  0,\r\n        name : \"Andreea\",\r\n        confirmed : false\r\n    },\r\n\r\n    {\r\n        id :  1,\r\n        name : \"Carmen\",\r\n        confirmed : false\r\n    },\r\n\r\n    {\r\n        id :  2,\r\n        name : \"Alex\",\r\n        confirmed : false\r\n    },\r\n    \r\n]","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AttendantsContainer from './Components/AttendantsContainer'\nimport {GUESTS} from './shared/guests.js'\n\n\nclass App extends Component {\n\n  state ={\n\n    guests : GUESTS\n\n  }\n\n  addGuest = () =>{\n\n  }\n\n  render() {\n    return (\n      \n        <div className=\"App\">\n          <header>\n            <h1>RSVP</h1>\n            <p>A Treehouse App</p>\n            <form>\n              <input type=\"text\" defaultValue=\"\" placeholder=\"Invite Someone\" />\n              <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n            </form>\n          </header>\n          <div className=\"main\">\n            <div>\n              <h2>Invitees</h2>\n              <label>\n                <input type=\"checkbox\" /> Hide those who haven't responded\n              </label>\n            </div>\n            <table className=\"counter\">\n              <tbody>\n                <tr>\n                  <td>Attending:</td>\n                  <td>2</td>\n                </tr>\n                <tr>\n                  <td>Unconfirmed:</td>\n                  <td>1</td>\n                </tr>\n                <tr>\n                  <td>Total:</td>\n                  <td>3</td>\n                </tr>\n              </tbody>\n            </table>\n\n            <AttendantsContainer \n              guests = {this.state.guests}\n            />\n            \n          </div>\n        </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}